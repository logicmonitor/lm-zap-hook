# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: "run unit tests"
      run: make test

    - name: "code coverage"
      run: make cover
    - uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.txt
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)

  lint:
    name: Code standards (linting)
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        args: -v
        version: v1.45

  security:
    name: Security
    runs-on: ubuntu-20.04
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: go

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        # we let the report trigger content trigger a failure using the GitHub Security features.
        args: '-quiet -fmt json -out result.json ./...'